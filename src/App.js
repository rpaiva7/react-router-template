
import { MainContainer } from "./style"
import Router from "./Router1/router"
import { BrowserRouter } from "react-router-dom";


function App() {
  return (
    <MainContainer>
      <Router />
    </MainContainer>
  )
}

export default App;

//Quando come√ßar um projeto do zero montar o router junto com as pastas primeiro, e depois come√ßa a montar e estilizar as p√°ginas. 

//O Route substitui o href e o switch case e permite trocar de p√°gina digitando o endere√ßo da p√°gina diretamente na URL. O useNavigate permite essa troca de p√°gina, altera√ß√£o de URL, ao clicar e interagir dentro do site.  

// O coordinator define qual ser√° a URL, e a URL define qual ser√° o componente chamado. Eu vou ter uma fun√ß√£o que define qual ser√° a URL, e √† partir dessa URL ela vai definir qual ser√° o componente. √† partir do useNavigate a gente acessa a URL, mudando a URL a gente acessa o nosso componente.

/* Navega√ß√£o com React Router 

# Rotas 

Rota √© um termo utilizado para se referir a um conjunto de endere√ßo e valor. Por exemplo:

"V√° at√© a Rua Nascimento Silva, 107, Ipanema. Voc√™ encontrar√° a casa do Tom Jobim."

Trazendo para o nosso contexto, pensando na URL:

"Acesse site.com.br/login. Voc√™ encontrar√° a p√°gina de login."

No come√ßo do curso, com HTML + JS, n√≥s mud√°vamos de p√°gina usando a tag `<a>` e passando um atributo `href` para ela. Esse atributo `href` correspondia a um arquivo HTML, e era poss√≠vel trocar entre as p√°ginas pela rota na barra de endere√ßos do navegador.

No React, a solu√ß√£o que est√°vamos usando at√© agora para trocar de p√°gina era a renderiza√ß√£o condicional, onde decidimos qual p√°gina renderizar com base em algum par√¢metro do estado.

Mas gerenciar componentes com estado desta forma √© chato e trabalhoso

=> Solu√ß√£o: React Router üåü

# React Router

O React Router √© uma Biblioteca para o React que simula comportamento de rotas na nossa aplica√ß√£o. Ela far√° o gerenciamento das rotas para a gente, mapeando cada rota para um componente

Exemplo: "/login" ‚áí LoginPage (/Login √© o endere√ßo e LoginPage √© o valor)

Entre as vantagens de utilizar o React Router, est√£o:

- Gest√£o de m√∫ltiplas p√°ginas simplificada, sem gerenciamento direto de estado;
- Possibilidade de acessar p√°ginas espec√≠ficas diretamente atrav√©s da URL;
- Acesso ao hist√≥rico do navegador

Como o react router √© uma biblioteca, precisamos instal√°-la. Fazemos isso executando o seguinte comando na raiz do projeto:

npm install react-router-dom

# Componentes do Router

A biblioteca nos disponibiliza componentes para facilitar o uso da l√≥gica de roteamento. Temos tr√™s componentes principais:

- BrowserRouter
- Routes
- Route

### BrowserRouter

BrowserRouter √© um componente, respons√°vel por "abrigar" e gerenciar todas as rotas. Ele funciona em conjunto com outros componentes react-router:

<BrowserRouter>

   {Aqui dentro vai tudo que for usar da biblioteca}

// </BrowserRouter>

/* ### Routes

√â o componente respons√°vel por permitir que apenas uma rota seja renderizada por vez. No Routes, todas as rotas ficam dentro deste componente. Seu comportamento √© semelhante ao do switch/case.

### Route

Route √© o componente respons√°vel por definir uma rota em nossa aplica√ß√£o. Uma Route deve estar dentro do Routes dentro de BrowserRouter. Uma Route recebe uma prop path, que tem a URL √† qual aquela rota corresponde.

A Route recebe o componente atrav√©s da props element, e o componente √© renderizado quando o path coincidir com a URL.

Exemplo: */

/* <BrowserRouter>
  <Routes>
    <Route index element= (<Home />) />
    <Route path ="teams" element = {<Teams />} />
  </Routes>
</BrowserRouter> */


/* ## Juntando as pe√ßas

Tendo estes tr√™s componentes, temos a seguinte disposi√ß√£o:

- Cada <Route /> recebe como props element a p√°gina que deve aparecer;
- recebe tamb√©m a props path, com a URL da p√°gina;
- <BrowserRouter> e <Routes> envolvem todas as rotas

# Hooks do React Router

As bibliotecas tamb√©m podem ter seus pr√≥prios hooks.

Vamos ver hoje dois hooks do React Router:

- useNavigate
- useParams

## useNavigate

A fun√ß√£o navigate, existente no react-router nos permite trocar a p√°gina atual. Infelizmente n√£o temos acesso f√°cil a ela dentro da nossa p√°gina HomePage. Para facilitar, foi criado o hook useNavigate, que nos permite acessar o hist√≥rico dentro de qualquer componente funcional.

O exemplo abaixo est√° sendo usado no nosso componente HomePage

import { useNavigate } from 'react-router-dom';

const HomePage = () => {
  const navigate = useNavigate()
    return <div> Home</div>
}

A fun√ß√£o navigate pode receber alguns par√¢metros:

- navigate("/rota"); ‚áí vai para p√°gina indicada;
- navigate(-1) ‚áí retorna para a √∫ltima p√°gina;
- navigate("/rota", {replace:true}) ‚áí troca de p√°gina impedindo que o usu√°rio volte

O exemplo abaixo usa a fun√ß√£o navigate("/rota")

import ( useNavigate } from 'react-router-dom'

const HomePage = () => {
  const navigate = useNavigate()

  const goToAboutPage = () => {
    navigate("/sobre")
  }
return (
  <div>
  <p>Home</p>
  <button onClick={goToAboutPage}>Sobre</button>
  </div>
  )
}
  
  ## Path Params

Antes de vermos como o hook useParams() funciona, precisamos entender qual problema ele resolve.

Voc√™s j√° devem ter observado que em v√°rios sites, a URL √© utilizada para guardar informa√ß√µes sobre a p√°gina.

https://facebook.com/post/ID_DO_POST

A grande vantagem de termos dados "salvos" na URL √© que se o usu√°rio atualiza a p√°gina, a URL vai se manter a mesma ent√£o podemos usar essas infos.

Exemplo: se tivermos uma rota "/postDetails", perderemos o id ao atualizar

Se tivermos uma rota: "/postDetails/ID_DO_POST", o id permanecer√° na URL mesmo que a p√°gina atualize.

Ali√°s, voc√™s j√° usaram Path Params antes sem saber! üëª

Lembrem das APIs no Postman. Muitas tinham uma parte da URL que voc√™s tinham que substituir por ":turma-nome-aluno". Os : indicam que √© um pathParam

Ao substituir o nome na URL, voc√™ est√£o passando uma vari√°vel para o backend.

Utilizamos path params nas nossas rotas!

Lembrando, √© no componente <Route> que definimos uma rota

<Route path="sobre/:linguagem" element={<AboutPage />} />

Com a rota alterada para receber path params, o pr√≥ximo passo √© alterar a l√≥gica que fizemos mais cedo.

const navigate = useNavigate()

const goToAboutPage = () => {
  navigate("/sobre/portugues")
}

Agora, com as informa√ß√µes sendo passadas, podemos fazer o uso do hook useParams()

import { useParams } from "react-router-dom";

export const AboutPage = () => {
  const pathParams = useParams();

  return (
    <div>
    <p>Sobre</p>
    <p>Linguagem: {pathParams.linguagem}</p>
    </div>
  );
}

## Observa√ß√£o sobre o surge

Quando usamos o Router, para subir o site usando o surge, precisamos dar os 4 comandos abaixo:

npm run build
cd build
cp index.html 200.html
surge

# Boas pr√°ticas no Router

- Cada rota deve mapear para uma p√°gina
- Como n√£o temos conceito de p√°gina em React, trataremos ele como um componente grand√£o que ocupa a tela inteira
- Esses componentes s√£o nomeados de forma a deixar claro que s√£o p√°ginas: LoginPage, FeedPage
- Podemos ter um componente de Router pr√≥prio que cont√©m a l√≥gica de roteamento (componentes do React Router)
- Dessa forma, temos uma no√ß√£o r√°pida de onde os dados v√™m e como a nossa √°rvore de componentes est√° organizada

## router coordinator

Crie um um componente que coordene as mudan√ßas de p√°ginas, centralizando as fun√ß√µes:

export const goToHomePage = (navigate) => {
  navigate("/");
};

export const goToAboutPage = (navigate, language) => {
  navigate(`/about/${language}`);
};

export const goBack = (navigate) => {
  navigate(-1);
};

  */







